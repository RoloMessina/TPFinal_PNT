// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TPFinal_PNT1.Context;

#nullable disable

namespace TPFinal_PNT1.Migrations
{
    [DbContext(typeof(AgendaContext))]
    partial class AgendaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TPFinal_PNT1.Models.Fecha", b =>
                {
                    b.Property<int>("Anio")
                        .HasColumnType("int");

                    b.Property<int>("Dia")
                        .HasColumnType("int");

                    b.Property<double>("Hora")
                        .HasColumnType("float");

                    b.Property<int>("Mes")
                        .HasColumnType("int");

                    b.ToTable("Fecha");
                });

            modelBuilder.Entity("TPFinal_PNT1.Models.Tratamiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<int>("ProfesionalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.HasIndex("ProfesionalId");

                    b.ToTable("Tratamientos");
                });

            modelBuilder.Entity("TPFinal_PNT1.Models.Turno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<int>("ProfesionalId")
                        .HasColumnType("int");

                    b.Property<int?>("ProfesionalId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.HasIndex("ProfesionalId");

                    b.HasIndex("ProfesionalId1");

                    b.ToTable("Turnos");
                });

            modelBuilder.Entity("TPFinal_PNT1.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DNI")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Usuario");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TPFinal_PNT1.Models.Paciente", b =>
                {
                    b.HasBaseType("TPFinal_PNT1.Models.Usuario");

                    b.HasDiscriminator().HasValue("Paciente");
                });

            modelBuilder.Entity("TPFinal_PNT1.Models.Profesional", b =>
                {
                    b.HasBaseType("TPFinal_PNT1.Models.Usuario");

                    b.HasDiscriminator().HasValue("Profesional");
                });

            modelBuilder.Entity("TPFinal_PNT1.Models.Tratamiento", b =>
                {
                    b.HasOne("TPFinal_PNT1.Models.Paciente", "Paciente")
                        .WithMany("Tratamientos")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPFinal_PNT1.Models.Profesional", "Profesional")
                        .WithMany("TratamientosAsignados")
                        .HasForeignKey("ProfesionalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Paciente");

                    b.Navigation("Profesional");
                });

            modelBuilder.Entity("TPFinal_PNT1.Models.Turno", b =>
                {
                    b.HasOne("TPFinal_PNT1.Models.Paciente", "Paciente")
                        .WithMany("Turnos")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TPFinal_PNT1.Models.Profesional", "Profesional")
                        .WithMany("TurnosAsignados")
                        .HasForeignKey("ProfesionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPFinal_PNT1.Models.Profesional", null)
                        .WithMany("Turnos")
                        .HasForeignKey("ProfesionalId1");

                    b.Navigation("Paciente");

                    b.Navigation("Profesional");
                });

            modelBuilder.Entity("TPFinal_PNT1.Models.Paciente", b =>
                {
                    b.Navigation("Tratamientos");

                    b.Navigation("Turnos");
                });

            modelBuilder.Entity("TPFinal_PNT1.Models.Profesional", b =>
                {
                    b.Navigation("TratamientosAsignados");

                    b.Navigation("Turnos");

                    b.Navigation("TurnosAsignados");
                });
#pragma warning restore 612, 618
        }
    }
}
